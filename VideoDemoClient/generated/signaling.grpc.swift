// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: signaling.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - signaling.SignalingService

/// Namespace containing generated types for the "signaling.SignalingService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum Signaling_SignalingService {
    /// Service descriptor for the "signaling.SignalingService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "signaling.SignalingService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "SendMessage" metadata.
        internal enum SendMessage {
            /// Request type for "SendMessage".
            internal typealias Input = Signaling_ClientInfo
            /// Response type for "SendMessage".
            internal typealias Output = Signaling_ClientInfo
            /// Descriptor for "SendMessage".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "signaling.SignalingService"),
                method: "SendMessage"
            )
        }
        /// Namespace for "JoinRoom" metadata.
        internal enum JoinRoom {
            /// Request type for "JoinRoom".
            internal typealias Input = Signaling_ClientInfo
            /// Response type for "JoinRoom".
            internal typealias Output = Signaling_ClientInfo
            /// Descriptor for "JoinRoom".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "signaling.SignalingService"),
                method: "JoinRoom"
            )
        }
        /// Descriptors for all methods in the "signaling.SignalingService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            SendMessage.descriptor,
            JoinRoom.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "signaling.SignalingService" service.
    internal static let signaling_SignalingService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "signaling.SignalingService")
}

// MARK: signaling.SignalingService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Signaling_SignalingService {
    /// Generated client protocol for the "signaling.SignalingService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 4. 시그널링 서비스 정의
    internal protocol ClientProtocol: Sendable {
        /// Call the "SendMessage" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 단일 메시지 전송 (Offer, Answer, Candidate)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Signaling_ClientInfo` message.
        ///   - serializer: A serializer for `Signaling_ClientInfo` messages.
        ///   - deserializer: A deserializer for `Signaling_ClientInfo` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func sendMessage<Result>(
            request: GRPCCore.ClientRequest<Signaling_ClientInfo>,
            serializer: some GRPCCore.MessageSerializer<Signaling_ClientInfo>,
            deserializer: some GRPCCore.MessageDeserializer<Signaling_ClientInfo>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Signaling_ClientInfo>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "JoinRoom" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 방에 참여하고 스트리밍 메시지 수신 (JoinRoom)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Signaling_ClientInfo` message.
        ///   - serializer: A serializer for `Signaling_ClientInfo` messages.
        ///   - deserializer: A deserializer for `Signaling_ClientInfo` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func joinRoom<Result>(
            request: GRPCCore.ClientRequest<Signaling_ClientInfo>,
            serializer: some GRPCCore.MessageSerializer<Signaling_ClientInfo>,
            deserializer: some GRPCCore.MessageDeserializer<Signaling_ClientInfo>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Signaling_ClientInfo>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "signaling.SignalingService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 4. 시그널링 서비스 정의
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "SendMessage" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 단일 메시지 전송 (Offer, Answer, Candidate)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Signaling_ClientInfo` message.
        ///   - serializer: A serializer for `Signaling_ClientInfo` messages.
        ///   - deserializer: A deserializer for `Signaling_ClientInfo` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func sendMessage<Result>(
            request: GRPCCore.ClientRequest<Signaling_ClientInfo>,
            serializer: some GRPCCore.MessageSerializer<Signaling_ClientInfo>,
            deserializer: some GRPCCore.MessageDeserializer<Signaling_ClientInfo>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Signaling_ClientInfo>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Signaling_SignalingService.Method.SendMessage.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "JoinRoom" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 방에 참여하고 스트리밍 메시지 수신 (JoinRoom)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Signaling_ClientInfo` message.
        ///   - serializer: A serializer for `Signaling_ClientInfo` messages.
        ///   - deserializer: A deserializer for `Signaling_ClientInfo` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func joinRoom<Result>(
            request: GRPCCore.ClientRequest<Signaling_ClientInfo>,
            serializer: some GRPCCore.MessageSerializer<Signaling_ClientInfo>,
            deserializer: some GRPCCore.MessageDeserializer<Signaling_ClientInfo>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Signaling_ClientInfo>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Signaling_SignalingService.Method.JoinRoom.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Signaling_SignalingService.ClientProtocol {
    /// Call the "SendMessage" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 단일 메시지 전송 (Offer, Answer, Candidate)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Signaling_ClientInfo` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sendMessage<Result>(
        request: GRPCCore.ClientRequest<Signaling_ClientInfo>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Signaling_ClientInfo>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.sendMessage(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Signaling_ClientInfo>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Signaling_ClientInfo>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "JoinRoom" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 방에 참여하고 스트리밍 메시지 수신 (JoinRoom)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Signaling_ClientInfo` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func joinRoom<Result>(
        request: GRPCCore.ClientRequest<Signaling_ClientInfo>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Signaling_ClientInfo>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.joinRoom(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Signaling_ClientInfo>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Signaling_ClientInfo>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Signaling_SignalingService.ClientProtocol {
    /// Call the "SendMessage" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 단일 메시지 전송 (Offer, Answer, Candidate)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sendMessage<Result>(
        _ message: Signaling_ClientInfo,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Signaling_ClientInfo>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Signaling_ClientInfo>(
            message: message,
            metadata: metadata
        )
        return try await self.sendMessage(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "JoinRoom" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 방에 참여하고 스트리밍 메시지 수신 (JoinRoom)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func joinRoom<Result>(
        _ message: Signaling_ClientInfo,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Signaling_ClientInfo>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Signaling_ClientInfo>(
            message: message,
            metadata: metadata
        )
        return try await self.joinRoom(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}